# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build and Deploy Patch release

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version of the release, if needed (x.y.z)
        required: false
        type: string
  push:
    branches: [ main ]
    paths:
      - 'node/**'
      - '.github/workflows/**'

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium, chrome, firefox]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: dont-code/core
          path: core
          fetch-depth: 0
          ref: 'main'
          token: ${{secrets.DONTCODE_ACTIONS_TOKEN}}
      - name: Setup
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: core/node/package-lock.json
      - name: Version
        if: ${{ success() && ( matrix.browser == 'chromium' ) && ( github.event.inputs.version == '') }}
        run: |
          PACKAGE_VERSION=$(npm dist-tag ls @dontcode/core | grep -Po '(?<=next: ).*')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          npm version $PACKAGE_VERSION
          npm version patch
        working-directory: 'core/node/packages/core'
      - name: Version
        if: ${{ success() && ( matrix.browser == 'chromium' ) && ( github.event.inputs.version != '') }}
        run: |
          PACKAGE_VERSION=${{inputs.version}}
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          npm version $PACKAGE_VERSION
        working-directory: 'core/node/packages/core'
      - name: Install
        run: |
          npm install -g nx
          npm install --force
        working-directory: 'core/node'
      - name: Build
        run: |
          nx run core:build:production
          nx run core:test
        working-directory: 'core/node'
      - name: Publish
        if: ${{ success() && ( matrix.browser == 'chromium' ) }}
        run: |
          npm publish core/node/dist/packages/core --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: ReVersion
        run: |
          npm version prerelease
        working-directory: 'core/node/packages/core'
      - name: ReBuild
        run: |
          nx run core:build:development
        working-directory: 'core/node'
      - name: RePublish
        if: ${{ success() && ( matrix.browser == 'chromium' ) }}
        run: |
          npm publish core/node/dist/packages/core --access public --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
